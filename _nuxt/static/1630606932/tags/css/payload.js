__NUXT_JSONP__("/tags/css", (function(a){return {data:[{blogsByTag:[{slug:"custom-mot-switch-giong-tren-ios",description:"Đợt đầu tuần xem update iOS 14, mình nhìn thấy thanh switch trên iOS. Đối với những lựa chọn mang tính Yes\u002FNo thì Apple rất hay sử dụng thanh switch này, đến nỗi nhìn nó là biết ngay là HĐH nào rồi.",title:"Custom một Switch giống trên iOS",image:"https:\u002F\u002Fres.cloudinary.com\u002Fkmacoders\u002Fimage\u002Fupload\u002Fv1630578012\u002Fkmacoders.github.io\u002Fstatic\u002Fimages\u002Fblog\u002F2020\u002F07\u002F2020-07-ios_noxjg8.jpg",tags:[a],published:"2020-07-12",contentBeforeJson:"\nLại một tuần trôi qua, thực ra thì nó vẫn sẽ trôi qua bất kể mình làm gì, học gì, hay thậm chí là nghĩ gì. Thế nên là, để cho buổi tối chủ nhật này không trôi qua vô ích, mình lại vào đây và viết một vài thứ gì đó có ích. Chợt nhận ra đã lâu lắm rồi mình không có một ngày cuối tuần không động đến code đúng nghĩa ( theo kiểu relax full time 1 ngày cuối tuần theo như quy tắc mình đặt ngày xưa ), vì bởi dạo này lúc nào cũng có tâm trạng là mình cần phải lao lên nhanh hơn nữa - để be greater hơn bạn bè, đồng nghiệp chẳng hạn, ai cũng giỏi mà. Umm, nên thôi, viết cái này tuy động đến code, nhưng với mình thì vẫn coi như “relax tàm tạm” được, vì là blog của mình mà…\n\n## Mở bài\nĐợt đầu tuần xem update iOS 14, mình nhìn thấy thanh switch trên iOS. Đối với những lựa chọn mang tính Yes\u002FNo thì Apple rất hay sử dụng thanh switch này, đến nỗi nhìn nó là biết ngay là HĐH nào rồi. Thế là mình chợt nghĩ lại hồi mới bắt đầu học CSS, mình cũng từng muốn làm một cái như thế bằng CSS, mà mãi không hiểu sao họ làm được, làm đẹp. Cho đến khi làm được, thì mình lại bị cuốn vào một lô một lốc những sự việc xảy ra, rồi bao thứ phải học khác, mà quên mất rằng “Umm, biết đâu cũng có một số người như mình hồi xưa, thắc mắc nguyên lý nào để custom ra một switch như vậy, rồi viết CSS như nào”.\nThế nên mình viết notes này, nhẽ là định hôm qua mà đêm qua ngồi làm nốt task trên công ty đến 1h sáng mới xong, nên mình để sang hôm nay. Thì với iFans thì khỏi nói rồi, ai dùng Android thì thanh ấy trông như thế này đây.\n\n![ios image](https:\u002F\u002Fres.cloudinary.com\u002Fkmacoders\u002Fimage\u002Fupload\u002Fv1630578011\u002Fkmacoders.github.io\u002Fstatic\u002Fimages\u002Fblog\u002F2020\u002F07\u002F2020-07-ios-1_jh4uaz.png)\n\nOkay, và mục tiêu của mình, vừa là CSS, vừa là nguyên lý để tạo nên những custom kiểu này, mình tin là từ những custom basic đến advanced hơn thì nguyên lý không đổi. Nên nếu áp dụng tốt, ta hoàn toàn có thể tạo ra những thứ đẹp hơn, phức tạp hơn rất nhiều.\n\n## Thân bài\n### Tạo structure HTML\nSwitch là 1 thanh dạng Yes\u002FNo, như vậy thì chúng ta sẽ nghĩ đến những input dạng này có trong HTML, có Checkbox và Radio Button, có lẽ trong trường hợp này thì Checkbox phù hợp hơn đúng không. Như vậy mục tiêu sẽ là custom Checkbox.\n\nBước đầu tiên, là ta quan sát để tạo base cho HTML. Ta thấy Switch có 1 thanh trượt và 1 quả bóng trượt bên trong. Như vậy, ta sẽ ra được 1 cấu trúc HTML đơn giản như thế này :\n\n``` html\n\u003Clabel class=\"toggle\" for=\"toggle\"\u003E\n  \u003Cinput type=\"checkbox\" id=\"toggle\"\u003E\n  \u003Cdiv class=\"slider\"\u003E\u003C\u002Fdiv\u003E\n\u003C\u002Flabel\u003E\n```\n\nTất nhiên, thẻ tất yếu phải có là input, có type=\"checkbox\". Cái quan trọng ở đây, chính là thành phần wrapper bao bọc bên ngoài. Nó có ý nghĩa rất lớn, thẻ \u003Clabel\u003E với attr for trùng khớp với id của input giúp cho khi ta ấn vào cái bao này, ngay lập tức thẻ input cũng sẽ bị ảnh hưởng ( thay vì phải ấn trực tiếp vào ô vuông nhỏ nhỏ của thẻ input checkbox ). Bắt đầu thấy có tí liên quan rồi đúng không, cái bao bao xung quanh của bóng nhỏ của iOS Switch chính là cái \u003Clabel\u003E này ấy. Nhưng không sao, để đấy, cứ làm tiếp đã. Kể cả cái \u003Cdiv\u003E với class = \"slider\", nhiều người ban đầu sẽ thắc mắc sao custom input lại có 1 div lạ ? Cứ để đấy đã.\n\n### Bước 1, ẩn đi thẻ input\nĐầu tiên, ta ẩn đi thẻ input\n\nLạ lùng đúng không, custom thẻ input lại ẩn đi thẻ input. Ngày xưa mình còn style cho cái thẻ input checkbox này cơ =)) nhưng tin mình đi, nó không thay đổi là mấy đâu. Ý tưởng sẽ là thế này, ta ẩn đi thẻinput, dùng thằng div với class là \"slider\" làm hình nhân thế mạng, ta sẽ bắt thằng hình nhân thế mạng này phản ứng thay cho thẻinput`. Okay, đi vào làm là hiểu ngay.\n\n``` css\n#toggle {\n  display: none;\n}\n```\n\nXong, thẻ input biến mất. Nhưng mà hãy nhớ là nó chỉ là không nhìn thấy thôi nhé, chứ chưa phải là xóa khỏi DOM đâu. Ta sẽ cần đến thằng input này, để hợp với \u003Clabel\u003E điều khiển quả bóng được tao ra từ \u003Cdiv class=\"slider\"\u003E\u003C\u002Fdiv\u003E. Minh họa này cho dễ hiểu :\n\n![ios image](https:\u002F\u002Fres.cloudinary.com\u002Fkmacoders\u002Fimage\u002Fupload\u002Fv1630578011\u002Fkmacoders.github.io\u002Fstatic\u002Fimages\u002Fblog\u002F2020\u002F07\u002F2020-07-ios-2_ag6p29.png)\n\nLúc này, ta muốn \u003Clabel\u003E thành cái khung bao bên ngoài, và \u003Cdiv class=\"slider\"\u003E thành rãnh nền màu xanh ( trắng ) bao lấy quả bóng.\n\nBước 2, style cho \u003Cdiv class=\"slider\"\u003E để tạo ra nền và quả bóng.\nThằng div này vai trò khá khủng. Nó sẽ là cái rãnh cho quả bóng lăn đi lăn lại ( bao ngoài quả bóng, và tất nhiên ``lại bao ngoài div như cấu trúc HTML đã viết. Như vậy khi ấn vào.sliderchẳng khác gì ấn vào` cả. ).\n\n``` css\n.slider {\n  width: 100px;\n  height: 60px;\n  border: 1px solid gray;\n  position: relative;\n  border-radius: 40px;\n}\n```\nRồi, nó dài 100px, rộng ( cao ) 60px. Trông nó như thế này :\n\n![ios image](https:\u002F\u002Fres.cloudinary.com\u002Fkmacoders\u002Fimage\u002Fupload\u002Fv1630578012\u002Fkmacoders.github.io\u002Fstatic\u002Fimages\u002Fblog\u002F2020\u002F07\u002F2020-07-ios-4_zfqjzv.png)\n\nCác thuộc tính CSS kia không có gì để bàn ngoại trừ position, tại sao lại có nó, ta sẽ nói ở ngay bên dưới đây.\n\nTiếp đến, ta tạo nốt quả bóng. Lúc này ta cần sử dụng một anh bạn hỗ trợ là CSS :before selector ( cặp :after và :before rất lợi hại, hiệu quả không kể hết, tuy nhiên bài viết này sẽ không tập trung quá sâu vào nó, nhưng vẫn nhớ là ít nhất không được thiếu thằng content nhé. Ở đây do không cần đến, nên mình set content:\"\", tức là không có gì cả ).\n\n``` css\n.slider::before {\n  background-color: #fff;\n  content: \"\";\n  height: 50px;\n  width: 50px;\n  left: 5px;\n  top: 5px;\n  position: absolute;\n  border-radius: 50%;\n  box-shadow: rgba(0, 0, 0, 0.1) 0 0 5px 5px;\n}\n```\n\nTại sao lại có các đơn vị đo thế kia, tại sao lại có top, left rồi positon, mình sẽ giải thích ngay.\n\n![ios image](https:\u002F\u002Fres.cloudinary.com\u002Fkmacoders\u002Fimage\u002Fupload\u002Fv1630578012\u002Fkmacoders.github.io\u002Fstatic\u002Fimages\u002Fblog\u002F2020\u002F07\u002F2020-07-ios-3_sfh9k6.png)\n\nGọi x và y là chiều dài và chiều rộng của thanh Switch, chính là thằng .slider bên trên.\nGọi d là đường kính của quả bóng ( tức là .slider::before ). Quả bóng này có đường kính là 50px, nên ta cho width = height = 50px. Tuy nhiên lúc này nó là hình vuông, nên ta thêm thuộc tính border-radius để bo tròn nó lại cho thành quả bóng.\nCó quả bóng rồi, ta bắt đầu tính toán vị trí ban đầu của nó. Cái Switch cao 60px ( y ), bóng có đường kính 50px, như vậy nó cần cách trên và dưới 5px, nên ta set top = 5px ( suy ra bottom = 50-50-5 = 5px luôn ). Để cho đẹp, ta cho quả bóng cách lề trái 5px luôn, như vậy có left = 5px. Ở đây, ta muốn căn quả bóng theo phụ thuộc thằng cha của nó là cái rãnh bao Switch, tức là thằng .slider nên ta cần đặt thằng con là position là absolute, còn thằng cha là relative ( Đây là lời giải cho dòng CSS position relative bên trên, bạn không thể định ví trí cho 1 child absolute nếu như parent của nó không phải là relative, absolute… chắc cái này các bạn đã biết khi học position ).\nXong, kết quả trông như này :\n\n![ios image](https:\u002F\u002Fres.cloudinary.com\u002Fkmacoders\u002Fimage\u002Fupload\u002Fv1630578012\u002Fkmacoders.github.io\u002Fstatic\u002Fimages\u002Fblog\u002F2020\u002F07\u002F2020-07-ios-4_zfqjzv.png)\n\nBước 3, xử lý việc chạy đi chạy lại của bóng\nVà đây là bước cuối. Hiểu được nó là coi như bạn đã hiểu nguyên lý của việc ta làm từ nãy đến giờ.\n\nKhi người dùng ấn vào thanh Switch ( tức là ấn vào \u003Clabel\u003E và .slider ), thì thanh input sẽ được tích và rơi vào trạng thái :checked ( dù nó đang bị ẩn, ẩn chứ không phải xóa ). Nên là ta lợi dụng việc này, khi thanh input được tích, ta đẩy quả bóng .slider::before sang phải và đổi nền rãnh bao .slider thành xanh giống Apple là xong.\n\nNghĩ gì làm đấy, ta viết như này :\n\nĐối với quả bóng, nó cần lăn sang phải 1 chút ( một chút là bao nhiêu thì lát ta cùng tính ):\n\n``` css\ninput[type=\"checkbox\"]:checked + .slider:before {\n  transform: translateX(40px);\n}\n```\nĐối với rãnh bao, nó cần chuyển sang màu xanh:\n\n``` css\n\ninput[type=\"checkbox\"]:checked + .slider {\n  background-color: #2dda77;\n  border: none;\n}\n```\n\n![ios image](https:\u002F\u002Fres.cloudinary.com\u002Fkmacoders\u002Fimage\u002Fupload\u002Fv1630578012\u002Fkmacoders.github.io\u002Fstatic\u002Fimages\u002Fblog\u002F2020\u002F07\u002F2020-07-ios-5_dqwsc9.png)\n\nLúc này ta lại quay lại hình vẽ bên trên. Ban đầu quả bóng ở vị trí cách lề trái 5px, thì khi nó lăn sang lề phải, nó vẫn phải cách 5px. Như vậy làm 1 phép toán, ta có đoạn đường quả bóng dịch chuyển bằng 100px - 50px - 5px - 5px = 40px. Hãy quay lại hình tính toán để biết các con số này là sao nhé. 2 bên cách 5px, quả bóng dài 50px, khung dài 100px, thì phần còn lại chính là phần quả bóng được phép lăn thôi. Để phục vụ việc này ta sử dụng thuộc tính transform: translateX(40px). Trong đó transform nó có rất nhiều giá trị hay như scale, skew... các kiểu con đà điểu, ở đây dùng translateX(40px), tức là dịch theo trục X ( chiều ngang ) 1 đoạn 40px.\n\nHoàn thiện\nĐến bước trên là xong 90% rồi, tuy nhiên nếu ta ấn thử thấy quả bóng di chuyển nhanh quá. Apple họ làm mượt lắm cơ mà, đừng lo, hãy thêm transition vào để tạo hiệu ứng bóng lăn và đổi màu nền thật mượt, 0.4s là con số phù hợp nhỉ. (Bonus thì transition bên cạnh transform bên trên cũng là những thuộc tính phức tạp, có rất rất nhiều tùy chỉnh và giá trị con. Nếu có thời gian, cuối tuần tới chẳng hạn, mình lại làm bài nữa về mấy thằng này để lấy cớ viết tiếp. Mình gà biết ít lắm. Nói hết lộ hết văn, haha. )\nCode CSS full sẽ như thế này :\n\n``` html\n\u003Clabel class=\"toggle\" for=\"toggle\"\u003E\n \u003Cinput type=\"checkbox\" id=\"toggle\"\u003E\n \u003Cdiv class=\"slider\"\u003E\u003C\u002Fdiv\u003E\n\u003C\u002Flabel\u003E\n```\n``` css\n#toggle {\n  display: none;\n}\n\n.slider {\n  width: 100px;\n  height: 60px;\n  border: 1px solid gray;\n  position: relative;\n  border-radius: 40px;\n}\n\n.slider::before {\n  background-color: #fff;\n  content: \"\";\n  height: 50px;\n  width: 50px;\n  left: 5px;\n  top: 5px;\n  position: absolute;\n  transition: 0.4s;\n  border-radius: 50%;\n  box-shadow: rgba(0,0,0,0.1) 0px 0px 5px 5px;\n}\n\ninput[type=\"checkbox\"]:checked + .slider {\n  background-color: #2dda77;\n  border: none;\n  transition: 0.4s;\n}\n\ninput[type=\"checkbox\"]:checked + .slider:before {\n  transform: translateX(40px);\n}\n```\n\nMinh họa trên Codepen :\n\n\u003Cp class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"BajwZNd\" data-user=\"hungkids\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\"\u003E\n  \u003Cspan\u003ESee the Pen \u003Ca href=\"https:\u002F\u002Fcodepen.io\u002Fhungkids\u002Fpen\u002FBajwZNd\"\u003E\n  Custom Checkbox\u003C\u002Fa\u003E by Phung Thai Hung (\u003Ca href=\"https:\u002F\u002Fcodepen.io\u002Fhungkids\"\u003E@hungkids\u003C\u002Fa\u003E)\n  on \u003Ca href=\"https:\u002F\u002Fcodepen.io\"\u003ECodePen\u003C\u002Fa\u003E.\u003C\u002Fspan\u003E\n\u003C\u002Fp\u003E\n\u003Cscript async src=\"https:\u002F\u002Fcpwebassets.codepen.io\u002Fassets\u002Fembed\u002Fei.js\"\u003E\u003C\u002Fscript\u003E\n\n\n\n## Kết bài\nVà thế là xong, thực ra custom các ô input dạng này đều dựa theo nguyên lý như vậy. Nên là quan trọng nhất vẫn là lôi máy ngay ra và tự tay thử xem sao nhé. Okay đoạn này rồi, lần sau mình sẽ viết những quả custom xịn hơn, nhiều animation hơn, để lại có cái lên đấy chém tiếp.\nGiờ là 22:00 đêm rồi, bố mẹ đang gọi ầm lên dưới nhà. Bố mẹ mình vừa đi du lịch trên Tuyên Quang về, mình bị bắt về nhà ở quê trông nhà mấy hôm nay. Giờ tắt máy đã, xuống xem có gì ăn, nghe thoáng thoáng là thấy 1 đống ô mai haha, chẳng ai hiểu mình hơn thế.\nThế nhé !!!\n\n( Update : 23:18. Mình chạy xuống nhà. Và bố mẹ mình phát hiện ra là để quên mất em iPad trên xe oto mất rồi. Bác ấy lại ở tận Việt Trì. Thế là mình mang laptop xuống bật Find My Phone trên Apple mà khổ, bố lại tắt mạng. Thế là thành ra câu chuyện nghiêng về cái iPad nhiều hơn là mình sẽ ăn gì. Ngậm ngùi cầm tạm 1 hộp ô mai lên tầng và thêm đoạn này vào blog. Haizz, mai 6 7h lại còn dậy để phi xuống HN sớm chiều còn đi làm. )\n"},{slug:"ban-biet-bao-nhieu-cach-de-an-mot-element",description:"Nhắc đến việc show, hide một element trong Document chắc ai cũng sẽ nhớ ngay đến giá trị none của display trong CSS. Vậy thì có bao giờ bạn thắc mắc về những cách làm nào khác cho kết quả tương tự không ?",title:"Bạn biết bao nhiêu cách để ẩn một element",image:"https:\u002F\u002Fres.cloudinary.com\u002Fkmacoders\u002Fimage\u002Fupload\u002Fv1630577997\u002Fkmacoders.github.io\u002Fstatic\u002Fimages\u002Fblog\u002F2020\u002F06\u002F2020-06-css_ifuduy.jpg",tags:[a],published:"2020-06-10",contentBeforeJson:"## Đặt vấn đề\nNgười ta hay nói rằng CSS là một kiểu “easy to learn, hard to master”. Đại loại là một người vừa học web được 1 tuần cũng nói là biết CSS, một frontend vài năm exp cũng chỉ nói là biết CSS.\nĐó là bởi thế giới của CSS rất rộng. Rộng đến mức có những properties rõ ràng là có ý nghĩa để làm việc này, nhưng biến tấu đi nó lại có thể dùng cho một việc khác. Thôi cái đấy nói sau đi. Thế nên trong thế giới của CSS, có rất nhiều các tips và tricks, được các tiền bối đi trước để lại sau những ngày đổ mồ hôi nước mắt.\nQuay trở lại với topic này, ẩn đi một phần tử HTML là một nhu cầu thường thấy đối với những người làm giao diện nói chung và dân frontend nói riêng. Mình tin là nói đến “hide element”, hầu như ai cũng có một cách tủ hiện lên trong đầu rồi, khi muốn ẩn sẽ dùng ngay cách đó. Vậy có bao giờ bạn tự hỏi, ngoài cách mình biết ra, có bao nhiêu cách khác có thể hoàn thành công việc một cách tương tự không ?\nTopic này mình sẽ chia sẻ một vài cách mà mình biết.\nÀ trước đó mình nhắc một chút đến cái gọi là Normal Flow của một HTML Document.\n\nNormal Flow là cách các phần tử HTML được sắp xếp và hiển thị trên trang web một cách bình thường, tức là nếu bạn không thay đổi bất cứ giá trị nào làm đổi vị trí của chúng. Hiểu nôm na là viết HTML sao thì nó sẽ xếp theo mặc định như vậy. Bạn có thể tìm hiểu thêm trên Docs của Mozilla về Normal_Flow.\n\nDo mình ngại làm từng cách lên Codepen rồi dẫn link sang đây, nên là mình sẽ viết sẵn một cấu trúc dễ đọc dễ hiểu như này. Bạn có thể mở tạo ngay một cái tương tự và tự tay mình thử xem có thú vị không ?\n\nFile HTML\n``` html\n\u003Cdiv class=\"container\"\u003E\n  \u003Cdiv class=\"item green\"\u003E\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"item red\"\u003E\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"item blue\"\u003E\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n```\n\nFile CSS\n``` css\n.container {\n  display: flex;\n}\n\n.item {\n  width: 100px;\n  height: 100px;\n}\n\n.green {\n  background-color: green;\n}\n\n\u002F* Chung ta se thuc hanh tren thanh .red nay... *\u002F\n.red {\n  background-color: red;\n}\n\n.blue {\n  background-color: blue;\n}\n```\n\n## Ẩn đi phần tử và làm thay đổi Normal Flow\n\n### Display\nCái này chắc được anh em sử dụng nhiều nhất. Dễ chơi dễ trúng thưởng. Đơn giản chỉ cần set cho element ấy thuộc tính display với giá trị là none. Nhưng mà đúng như tiêu đề của mục này, thì nó sẽ làm cho element ấy biến mất, như chưa hề tồn tại trong DOM.\n\n``` css\n.red {\n  background-color: red;\n  display: none;\n}\n```\n\n### Absolute Position\nThuộc tính position không phải là một thuộc tính lạ. Nó có nhiều giá trị, nhưng lần này để phục vụ cho việc này, chúng ta dùng giá trị absolute. Bạn biết là absolute sẽ làm thay đổi flow, khi set absolute, vị trí của element sẽ biến mất, các element xung quanh sẽ trám vào vị trí vừa rồi của nó. Vậy làm thế nào để nó biến mất đây ?\nChúng ta đã từng sử dụng các thuộc tính top, left, bottom, right để di chuyển vị trí một element có position là absolute, vậy thì câu trả lời chính là set cho left: -999px. Như vậy, element đó sẽ biến mất khỏi màn hình.\n\n``` css\n.red {\n  background-color: red;\n  position: absolute;\n  left: -999px;\n}\n```\n\n### HTML hidden attribute\nRất đơn giản, thêm ngay attr hidden vào element chúng ta muốn ẩn trong HTML.\n\n``` html\n\u003Cdiv class=\"container\"\u003E\n  \u003Cdiv class=\"item green\"\u003E\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"item red\" hidden\u003E\u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"item blue\"\u003E\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n```\nHiệu quả đem lại khá giống với set display: none.\n\n## Ẩn đi phần tử nhưng không thay đổi Normal Flow\n### Opacity and filter: opacity()\nCú pháp của 2 thằng này là opacity: n và filter: opacity(n). Trong đó, n là một số nằm trong khoảng từ 0 -\u003E 1 hoặc là một giá trị phần trăm từ 0% -\u003E 100%, tùy từng người dùng. Có ý tưởng rồi chứ, ta chỉ cần set cho độ mờ là nhỏ nhất. Như vậy, element sẽ biến mất thôi.\n\n``` css\n.red {\n  background-color: red;\n  opacity: 0;\n}\n```\nhoặc là :\n\n``` css\n.red {\n  background-color: red;\n  filter: opacity(0);\n}\n```\n\nNhớ làm thử để biết vì sao mình nói nó những thằng trong mục này không làm thay đổi normal flow nhé.\n\n### Color Alpha Transparency\nCSS hỗ trợ nhiều hệ màu. Ví dụ như hex, rgb, hsl… nhưng hãy dừng lại ở đó. Bạn có biết là nó còn có những cách ghi khác kèm theo một chữ “a” ở cuối không ? rgba, hsla chẳng hạn. Trong đó, chữ “a” chính là viết tắt của một giá trị cuối cùng sau mã màu, gọi là “alpha”. Giá trị alpha này đại diện cho độ mờ. Nghĩ về nó giống như opacity ở trên vậy, giá trị là một số nằm trong khoảng từ 0 -\u003E 1.\nNhư vậy, ta có thể ẩn thằng red đi theo cách như này :\n\n``` css\n.red {\n  color: rgba(0, 0, 0, 0);\n  background-color: rgba(0, 0, 0, 0);\n}\n```\nVới hsla(0,0,0,0) cũng như thế thôi nhé. Tầm này màu gì không quan trọng, vì đằng nào alpha chẳng bằng 0 mà. Nên là nó thành trong suốt hết.\n\n### Transform\nĐúng như tên gọi của nó, transform một thuộc tính dùng để biến đổi element theo một cách nào đó. Nó đi cùng với các giá trị translate, scale, rotate, skew. Ở đây mình sẽ không đi sâu về thuộc tính này, và cả các giá trị, mình tin là nó có đầy ở khắp nơi trên google. Còn lúc này, hãy để ý đến 1 tips dùng transform kèm với scale và translate. Đó là set cho scale giá trị là 0 ( tức là phóng lên gấp 0 lần so với hình dạng trước của element ), hoặc là set cho translate giá trị là (-999px, 0px) ( dịch chuyển element theo trục x -999px ). Thử làm xem nhé.\n\n``` css\n.red {\n  background-color: red;\n  transform: scale(0);\n}\n```\nhoặc\n\n``` css\n.red {\n  background-color: red;\n  transform: translate(-999px, 0);\n}\n```\nHay một cách lạ lùng.\n\n### Clip-path\nclip-path không phải là một thuộc tính easy. Nó khá lằng nhằng và phức tạp cho ai muốn thành thạo. Tuy nhiên, ở đây, hãy nghĩ về clip-path là một thuộc tính giúp tạo ra một vùng cắt lên element, nó định nghĩa ra vùng nào của element được phép hiển thị thông qua nhát cắt đó.\nNói đến đây thì ý tưởng hiện lên đúng không, là ta sẽ tạo một vùng cắt bằng 0, như vậy chẳng có cái gì được hiển thị cả.\nỞ đây, ta tạo ra vùng cắt hình tròn circle(0).\n\n``` css\n.red {\n  background-color: red;\n  clip-path: circle(0);\n}\n```\nNhưng mà thuộc tính này hay thật sự đấy nhé, có thời gian vẫn nên tìm hiểu thêm.\n\n### Visibility\nĐúng như tên gọi của nó, cái này thì chắc không cần bàn nhiều. Chỉ là đã từng nghe qua hay chưa thôi chứ cũng không cần phải gọi là tips hay tricks gì cả. 2 giá trị của visibility cũng vô cùng dễ hiểu. Chọn visible nếu muốn element hiển thị, chọn hidden nếu muốn ẩn. Nhanh gọn lẹ cứ như giá trị boolean vậy.\n\n``` css\n.red {\n  background-color: red;\n  visibility: hidden;\n}\n```\n\n### Overlay Another Element\nCòn quả này thì đúng gọi là tips thực sự, nhưng mình không khuyến khích làm theo, vì nó lằng nhằng. Nói chung là ý tưởng sẽ như thế này. Ban đầu chúng ta có một ô màu đỏ. Giờ muốn ô đỏ ẩn đi, chúng ta chỉ cần kiếm 1 cái ô có màu giống y chang màu nền, kích thước thì bằng ô đỏ kia, sau đó đem phủ nó lên ô đỏ. Ấy haha, thực ra ô đỏ vẫn ở đó, nhưng nó đã bị cái ô có màu giống hệt màu nền kia che lên trên, nên là nhìn cứ tưởng không có gì.\nNói này cho dễ hình dung, ngày xưa ông cha ta hay lấy lá cây để che xe tăng trong rừng, tránh máy bay địch phát hiện, nó ném bom cho thì sml. Thực ra cái xe tăng đâu có biến mất, chẳng qua nó bị lá cây che bên trên, mà lá cây thì có màu giống hệt xung quanh, nên bọn Mỹ nó tưởng là ở dưới chẳng có gì cả thôi.\n\n``` css\n.red {\n  background-color: red;\n  position: relative;\n}\n\n.red::after {\n  content:'';\n  position: absolute;\n  top: 0;\n  height: 100%;\n  width: 100%;\n  background-color: #fff;\n}\n```\n2 pseudo :after và :before rất mạnh. Nó có thể làm được rất nhiều việc chứ không chỉ nguyên thế kia. Nếu biết kết hợp thì sẽ tạo ra những quả animation rất để đời chứ không đùa. Nói chung là quá lắm tác dụng.\n\n\n### Reduce Dimensions\nChúng ta cũng có thể ẩn đi element bằng cách giảm đi kích thước của nó bằng cách sử dụng các thuộc tính như width, height, padding, border-width hoặc là font-size. Đôi khi kết hợp thêm overflow: hidden để đảm bảo phần content bên trong ( nếu có ) không bị tràn ra ngoài.\n\n``` css\n.red {\n  background-color: red;\n  height: 0;\n  padding: 0;\n  overflow: hidden;\n}\n```\n\n## Tóm lại\nTóm lại, là tôi mỏi mắt lắm rồi. Nay ngồi trên công ty từ 9h sáng đến 18h tối nhìn con màn máy tính khoảng 27 inch. Xong về làm thêm quả này nữa nên nói chung là mỏi hết cả mắt. Nên là thôi, đấy một đống cách, ông nào thích dùng cách nào thì dùng. Đôi khi nó còn phải phụ thuộc vào hoàn cảnh nữa. Mà các ông biết đấy, làm frontend thì nó có cả tỉ hoàn cảnh khác nhau, nên nói chung là cứ thích thì dùng thôi.\nHi vọng các ông tìm được cho mình thêm những điều các ông chưa biết ( hoặc chưa để ý tới ) ở trong bài viết này, từ đó có nhiều hơn một lựa chọn cho task. Hãy ném gạch cho tôi qua email ( ở ngay phía trên ấy, tôi add sẵn mail vào rồi ) và nói “Ê thằng ngu, mày làm sai rồi” hoặc là “Ê thằng ngu, mày biết không, tao thậm chí còn có thêm vài cách nữa đây”… Tôi sẽ sửa hoặc bổ sung theo ý kiến của các ông.\nTôi đi nghe nhạc Vũ đây.\nThế nhé !\n"}]}],fetch:{},mutations:void 0}}("css")));